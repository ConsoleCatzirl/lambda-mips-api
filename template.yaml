AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  MIPS transform and cache API

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

Parameters:
  CacheExpirationHours:
    Type: Number
    Default: 7
    Description: Number of days until cached files are invalidated
  SsmKeyAdminArns:
    Type: CommaDelimitedList
    Description: List of role ARNs to administer the encryption key
  SsmAliasPrefix:
    Type: String
    Default: lambda-mips-api

Resources:
  CacheBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private

  CacheBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CacheBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Principal:
              AWS: !GetAtt FunctionRole.Arn
            Resource: !Sub "${CacheBucket.Arn}/*"

  Function:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: .
      Handler: mips_api.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          CacheBucketName: !Ref CacheBucket
          CacheBucketExpirationHours: !Ref CacheExpirationHours
          SsmPath: '/lambda/mipsSecret'
      Role: !GetAtt FunctionRole.Arn
      Events:
        ServiceCatalogProgramCodes:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /catalog/ProgramCodes.json
            Method: get
        ServiceCatalogProgramCodesOther:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /catalog/ProgramCodesOther.json
            Method: get
        CostExplorerCategoryRules:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /costs/CategoryRules.yaml
            Method: get
        CacheRefresh:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /cache/refresh
            Method: get
        CachePurge:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /cache/purge
            Method: delete

  FunctionRole:   # execute lambda function with this role
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lambda/mipsSecret'
                Action:
                  - 'ssm:GetParameter*'
                Effect: Allow
              - Resource: !GetAtt CacheBucket.Arn
                Action:
                  - 's3:ListBucket'
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Effect: Allow

  # Key for encrypting our secret parameter
  # The secret parameter will need to be created manually in SSM
  # https://aws.amazon.com/blogs/compute/sharing-secrets-with-aws-lambda-using-aws-systems-manager-parameter-store/
  SsmKey:
    Type: AWS::KMS::Key
    Properties:
      Enabled: True
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Lambda Access
            Principal:
              AWS: !GetAtt FunctionRole.Arn
            Resource: '*'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Effect: Allow
          - Sid: Admin Access
            Principal:
              AWS: !Ref SsmKeyAdminArns
            Resource: '*'
            Action:
              - 'kms:Create*'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Effect: Allow

  SsmKeyAlias:  # A friendly name used in the console
    Type: AWS::KMS::Alias
    Properties:
      TargetKeyId: !Ref SsmKey
      AliasName: !Sub 'alias/${SsmAliasPrefix}-ssm-key'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiRouteServiceCatalog:
    Description: "API Gateway endpoint URL for Prod stage for function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/catalog/"
  ApiRouteCostCategories:
    Description: "API Gateway endpoint URL for Prod stage for function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/costs/"
  FunctionArn:
    Description: "Lambda Function ARN"
    Value: !GetAtt Function.Arn
  FunctionRoleArn:
    Description: "Implicit IAM Role created for function"
    Value: !GetAtt FunctionRole.Arn
